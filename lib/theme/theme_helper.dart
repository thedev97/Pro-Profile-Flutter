import 'package:flutter/material.dart';

/// Helper class for managing themes and colors.
class ThemeManager {
  static String _themeData = 'primary';

  static void setThemeData(String theme) {
    _themeData = theme;
  }

  static String getThemeData() {
    return _themeData;
  }
}

class ThemeHelper {
  // The current app theme
  final _appTheme = ThemeManager.getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onError.withOpacity(0.36),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4),
          ),
          shadowColor: colorScheme.primary,
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 24,
        space: 24,
        color: colorScheme.onPrimaryContainer,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        displaySmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 35.0,
          fontFamily: 'THICCCBOI',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 20.0,
          fontFamily: 'Manrope',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onError,
          fontSize: 18.0,
          fontFamily: 'Manrope',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF202020),

    // Error colors
    errorContainer: Color(0XFF949494),
    onError: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X44313131),
    onPrimaryContainer: Color(0XFFDEDEDE),
  );
}

class ProProfileDecoration {
  static BoxDecoration get fillPrimary => BoxDecoration(
        color: theme.colorScheme.primary.withOpacity(1),
      );

  static BoxDecoration get fillPrimaryContainer => BoxDecoration(
        color: theme.colorScheme.primaryContainer,
      );
}

class BorderRadiusStyle {
  static BorderRadius get roundedBorder4 => BorderRadius.circular(5.0);
}

double get strokeAlignInside => BorderSide.strokeAlignInside;

double get strokeAlignCenter => BorderSide.strokeAlignCenter;

double get strokeAlignOutside => BorderSide.strokeAlignOutside;

class ProProfileTextStyles {
  // Display text style
  /*static get displaySmall =>
      theme.textTheme.displaySmall!.manrope.copyWith(
        fontSize: 36.0
      );*/

  // Title text style
  static get titleMediumOnError => theme.textTheme.titleMedium!.copyWith(
      color: theme.colorScheme.onError.withOpacity(0.6),
      fontWeight: FontWeight.w700);

  static get titleMediumOnPrimaryContainer =>
      theme.textTheme.titleMedium!.copyWith(
          color: theme.colorScheme.onPrimaryContainer,
          fontWeight: FontWeight.w700);

  static get titleMediumOnPrimarySemiBold =>
      theme.textTheme.titleMedium!.copyWith(
          color: theme.colorScheme.onPrimaryContainer,
          fontWeight: FontWeight.w600);

  static get titleMediumSemiBold => theme.textTheme.titleMedium!
      .copyWith(fontSize: 16.0, fontWeight: FontWeight.w600);

  static get titleMediumSemiBold_1 =>
      theme.textTheme.titleMedium!.copyWith(fontWeight: FontWeight.w600);

  static get titleMedium => theme.textTheme.titleMedium!.copyWith(
      color: const Color(0XFF949494),
      fontSize: 16.0,
      fontWeight: FontWeight.w600);

  static get titleMedium1 => theme.textTheme.titleMedium!.copyWith(
      color: const Color(0XFFEBEBEB),
      fontSize: 16.0,
      fontWeight: FontWeight.w600);

/*static get titleMedium2 =>
      theme.textTheme.titleMedium!.tHICCCBOI.copyWith(
        color: theme.colorScheme.errorContainer,
        fontSize: 16.0,
        fontWeight: FontWeight.w600
      );*/
}

class ProProfileButtonStyles {
  // Text button style
  static ButtonStyle get none => ButtonStyle(
        backgroundColor: MaterialStateProperty.all<Color>(Colors.transparent),
        elevation: MaterialStateProperty.all<double>(0),
      );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
